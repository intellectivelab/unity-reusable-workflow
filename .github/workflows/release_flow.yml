name: 'Release Trigger'
on:
  workflow_call:
    inputs:
      type:
        description: 'Action type'
        required: true
        type: string
      java-version:
        description: 'Java version for running maven'
        required: false
        type: string
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Inputs
        run: |
          echo "Input type '${{ github.event.inputs.type }}'"
          echo "Input javaVersion '${{ github.event.inputs.java-version }}'"

      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set up JDK ${{ github.event.inputs.java-version || 11 }}
        uses: actions/setup-java@v1
        with:
          java-version: ${{ github.event.inputs.java-version || 11 }}

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Configure Maven settings
        env:
          M2_SETTINGS: ${{ secrets.M2_SETTINGS }}
        run: printf "$M2_SETTINGS" > ~/.m2/settings.xml

      - name: Branch name
        id: branch_name
        run: echo ::set-output name=VALUE::${GITHUB_REF_NAME}

      - name: Tag name
        id: tag_name
        run: |
          BRANCH_NAME="${{ steps.branch_name.outputs.VALUE }}"
          RELEASE_TYPE="${{ github.event.inputs.type }}"
          TS="$(TZ=GMT date +"%Y-%m-%dT%H_%M_%SZ")"
          if [ "${BRANCH_NAME}" == "dev" ]; then
            if [ "${RELEASE_TYPE}" == "Snapshot" ]; then
              TAG="snapshot-${TS}"
            elif [ "${RELEASE_TYPE}" == "QA Release" ]; then
              REL_VERSION=$(git tag -l --sort=-v:refname | grep "^wfrelease-" | head -n 1|\
                sed -E "s/wfrelease-([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)-.*/\1/g")
              if [[ -z "${REL_VERSION}" ]]; then
                echo "No release tags to start ${RELEASE_TYPE}"
                exit 1
              fi
              VERSION=$(git tag -l --sort=-v:refname | grep "^qarelease-" | head -n 1|\
                sed -E "s/qarelease-([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+-RC[[:digit:]]+)-.*/\1/g")
              NEXT_VERSION=1
              [[ "$VERSION" =~ (.*-RC)([0-9]+)$ ]] && NEXT_VERSION="$((${BASH_REMATCH[2]} + 1))"
              if [[ "${VERSION}" = $REL_VERSION* ]]; then
                NEXT_VERSION="${REL_VERSION}-RC${NEXT_VERSION}"
              else
                NEXT_VERSION="${REL_VERSION}-RC1"
              fi
              echo "${NEXT_VERSION}"
              TAG="qarelease-${NEXT_VERSION}-${TS}"
            else
              echo "Illegal branch ${BRANCH_NAME} for ${RELEASE_TYPE}"
              exit 1
            fi
          elif [ "${BRANCH_NAME}" == "master" ] || [ "${BRANCH_NAME}" == "main" ] || [[ "${BRANCH_NAME}" = "release"* ]]; then
            if [ "${RELEASE_TYPE}" == "Release" ] || [ "${RELEASE_TYPE}" == "Patch Release" ] ; then
              VERSION=$(git tag -l --sort=-v:refname | grep "^wfrelease-" | head -n 1|\
                sed -E "s/wfrelease-([[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+)-.*/\1/g")
              if [[ -z "${VERSION}" ]]; then
                echo "No release tags to start ${RELEASE_TYPE}"
                exit 1
              fi
              [[ "$VERSION" =~ (.*[^0-9])([0-9]+)$ ]] && NEXT_VERSION="${BASH_REMATCH[1]}$((${BASH_REMATCH[2]} + 1))"
              TAG="wfrelease-${NEXT_VERSION}-${TS}"
            else
              echo "Illegal branch ${BRANCH_NAME} for ${RELEASE_TYPE}"
              exit 1
            fi
          else
              echo "Illegal branch ${BRANCH_NAME} for ${RELEASE_TYPE}"
              exit 1
          fi
          echo "Tag ${TAG} Next version ${NEXT_VERSION}"
          echo ::set-output name=VALUE::${TAG}
          echo ::set-output name=NEXT_VERSION::${NEXT_VERSION}

      - name: Check maven options
        id: mvn_options
        run: |
          echo ::set-output name=HAS_DEV_NO_TESTS::$(mvn help:all-profiles|grep "Profile Id: dev-no-tests"|wc -l)
          echo ::set-output name=BOM_MODULE::$(mvn help:evaluate  -Dexpression=project.modules[0] -q -DforceStdout| grep -e "-bom$")

      - name: Run summary
        run: |
          BRANCH_NAME="${{ steps.branch_name.outputs.VALUE }}"
          RELEASE_TYPE="${{ github.event.inputs.type }}"
          RELEASE_TAG="${{ steps.tag_name.outputs.VALUE }}"
          RELEASE_VERSION="${{ steps.tag_name.outputs.NEXT_VERSION }}"
          BOM_MODULE="${{ steps.mvn_options.outputs.BOM_MODULE }}"
          HAS_DEV_NO_TESTS="${{ steps.mvn_options.outputs.HAS_DEV_NO_TESTS }}"
          echo "Branch: ${BRANCH_NAME}" >> $GITHUB_STEP_SUMMARY
          echo "Release Type: ${RELEASE_TYPE}" >> $GITHUB_STEP_SUMMARY
          echo "Release Tag: ${RELEASE_TAG}" >> $GITHUB_STEP_SUMMARY
          echo "Release Version: ${RELEASE_VERSION}" >> $GITHUB_STEP_SUMMARY

      - name: Set release version
        run: |
          RELEASE_TYPE="${{ github.event.inputs.type }}"
          BOM_MODULE="${{ steps.mvn_options.outputs.BOM_MODULE }}"
          if [ "${RELEASE_TYPE}" != "Snapshot" ]; then
            mvn versions:set -DgenerateBackupPoms=false -DnewVersion=${{ steps.tag_name.outputs.NEXT_VERSION }}
            if [[ ! -z "${BOM_MODULE}" ]]; then
              mvn versions:set -f "./${BOM_MODULE}/pom.xml" -DgenerateBackupPoms=false -DnewVersion=${{ steps.tag_name.outputs.NEXT_VERSION }}
            fi
          fi
      - name: Set dependencies
        run: |
          RELEASE_TYPE="${{ github.event.inputs.type }}"
          BOM_MODULE="${{ steps.mvn_options.outputs.BOM_MODULE }}"
          if [ "${RELEASE_TYPE}" == "Release" ]; then
            mvn versions:use-latest-versions \
              -Dincludes="com.intellective.*,com.vspace.*,com.vegaecm.*,com.vignette.idm" \
              -DallowSnapshots=false
            if [[ ! -z "${BOM_MODULE}" ]]; then
              mvn versions:set -f "./${BOM_MODULE}/pom.xml" versions:use-latest-versions \
                -Dincludes="com.intellective.*,com.vspace.*,com.vegaecm.*,com.vignette.idm" \
                -DallowSnapshots=false
            fi
          elif [ "${RELEASE_TYPE}" == "Patch Release" ]; then
            mvn versions:use-latest-versions -Dincludes="com.intellective.*,com.vspace.*,com.vegaecm.*,com.vignette.idm" \
              -DallowSnapshots=false -DallowMajorUpdates=false -DallowMinurUpdates=false -DallowIncrementalUpdates=true
            if [[ ! -z "${BOM_MODULE}" ]]; then
              mvn versions:set -f "./${BOM_MODULE}/pom.xml" versions:use-latest-versions \
                -Dincludes="com.intellective.*,com.vspace.*,com.vegaecm.*,com.vignette.idm" \
                -DallowSnapshots=false -DallowMajorUpdates=false -DallowMinurUpdates=false -DallowIncrementalUpdates=true
            fi
          fi
      - name: Build release
        run: |
          HAS_DEV_NO_TESTS="${{ steps.mvn_options.outputs.HAS_DEV_NO_TESTS }}"
          if [ "${HAS_DEV_NO_TESTS}" -eq 0 ]]; then
            mvn -B deploy -DskipTests=true
          else
            mvn -B deploy -P dev-no-tests
          fi
      - name: Set git info
        run: |
          git config --global user.name 'Intellective Workflow'
          git config --global user.email 'intellective-wf@intellective.com'

      - name: Commit
        run: |
          RELEASE_TYPE="${{ github.event.inputs.type }}"
          NEXT_VERSION="${{ steps.tag_name.outputs.NEXT_VERSION }}"
          if [ "${RELEASE_TYPE}" == "Release" ] || [ "${RELEASE_TYPE}" == "Patch Release" ] ; then
            if [ -z "$(git status --porcelain=v1 2>/dev/null)" ]; then
              echo "no changes to commit"
            else
              git commit -a -m "Releasing ${NEXT_VERSION}"
            fi
          fi

      - name: Set tag
        run: |
          git tag "${{ steps.tag_name.outputs.VALUE}}"

      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          tags: true
          branch: "${{ steps.branch_name.outputs.VALUE}}"

      - name: Register release
        run: |
          BRANCH_NAME="${{ steps.branch_name.outputs.VALUE }}"
          RELEASE_TYPE="${{ github.event.inputs.type }}"
          RELEASE_TAG="${{ steps.tag_name.outputs.VALUE }}"
          RELEASE_VERSION="${{ steps.tag_name.outputs.NEXT_VERSION }}"
          if [ "${RELEASE_TYPE}" != "Snapshot" ]; then
            REQUEST_DATA=$(jq -c -n \
             --arg tag "$RELEASE_TAG" \
            --arg branch "$BRANCH_NAME" \
            --arg name "CI Release: $RELEASE_VERSION" \
            --arg desc "Release $RELEASE_VERSION by release flow" \
            '{tag_name: $tag, target_commitish: $branch, name: $name, body: $desc, "draft": false, "prerelease": false }')
            echo "trigger release ${GITHUB_REPOSITORY} ${REQUEST_DATA}"
            curl -s -X POST \
                  -H "Authorization: bearer ${WORKFLOW_TOKEN}" \
                  -H "Content-Type:application/json" \
                  -H 'Accept: application/vnd.github.antiope-preview+json' \
                  "https://api.github.com/repos/${GITHUB_REPOSITORY}/releases" \
                  -d "${REQUEST_DATA}"
          fi
        env:
          WORKFLOW_TOKEN: ${{ secrets.GITHUB_TOKEN }}